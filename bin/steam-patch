#!/usr/bin/env python

import os
import yaml
import shutil
import filecmp
import subprocess
from inotify_simple import INotify, flags
import chimera_app.context as context
from chimera_app.config import GAMEDB
from chimera_app.file_utils import ensure_directory


patches = {}
watches = {}
inotify = INotify()
watch_flags = flags.CREATE | flags.MODIFY | flags.DELETE
library_path = os.path.join(context.STEAM_DIR, 'steamapps/common')
ensure_directory(library_path)
steam_dir = inotify.add_watch(library_path, watch_flags)


def apply_patch(game_dir):
    if not os.path.exists(os.path.join(library_path, game_dir)):
        print('apply_patch dir not exists:', game_dir)
        return

    print('applying patch:', game_dir)
    patch_specs = patches[game_dir]
    for spec in patch_specs:
        if 'exec' in spec:
            cmd = spec['exec']
            subprocess.call([cmd],
                            shell=True,
                            cwd=os.path.join(library_path, game_dir))
        elif 'copy' in spec:
            args = spec['copy']
            dst = os.path.join(library_path, game_dir, args['dst'])
            if not os.path.exists(dst) or not filecmp.cmp(args['src'], dst):
                if os.path.exists(os.path.dirname(dst)):
                    print('command: copy', args['dst'])
                    shutil.copyfile(args['src'], dst)


def start_watch(game_dir):
    if not os.path.exists(os.path.join(library_path, game_dir)):
        print('start_watch dir not exists:', game_dir)
        return

    print('starting watch:', game_dir)
    wd = inotify.add_watch(os.path.join(library_path, game_dir),
                           watch_flags)
    watches[wd] = game_dir
    apply_patch(game_dir)


def load_patch_data(data):
    for gameid in data:
        if 'patch_dir' in data[gameid] and 'patches' in data[gameid]:
            game_dir = data[gameid]['patch_dir']
            patches[game_dir] = data[gameid]['patches']
            start_watch(game_dir)

    data.clear()


def main():
    if not os.path.isdir(context.PATCH_DIR):
        print(f'Patches directory does not exist ({context.PATCH_DIR})')
        return

    if not GAMEDB or 'steam' not in GAMEDB:
        print('Game database data not available')
        return

    os.chdir(context.PATCH_DIR)
    load_patch_data(GAMEDB['steam'])

    while True:
        for event in inotify.read():
            if event.wd == steam_dir and event.name in patches:
                start_watch(event.name)
            if event.wd in watches:
                apply_patch(watches[event.wd])


if __name__ == '__main__':
    main()
