#!/usr/bin/env python

import vdf
import time
import yaml
import shutil
import urllib.request
from steam_buddy.utils import BuddyContext
from steam_buddy.utils import ensure_directory
from steam_buddy.utils import ensure_directory_for_file
from steam_buddy.utils import file_exists


def load_steam_config(path):
    if file_exists(path):
        data = vdf.load(open(path))
    else:
        data = vdf.VDFDict()
        data['InstallConfigStore'] = {'Software': {'Valve': {'Steam': {}}}}

    steam = data['InstallConfigStore']['Software']['Valve']['Steam']

    if 'CompatToolMapping' not in steam:
        steam['CompatToolMapping'] = {}
    else:
        stale_entries = []

        for game in steam['CompatToolMapping']:
            if ('name' in steam['CompatToolMapping'][game] and
                    'config' in steam['CompatToolMapping'][game]):
                if (steam['CompatToolMapping'][game]['name'] == '' and
                        steam['CompatToolMapping'][game]['config'] == ''):
                    stale_entries.append(game)

        for entry in stale_entries:
            del steam['CompatToolMapping'][entry]

    return data


def load_steam_localconfig(path):
    if file_exists(path):
        data = vdf.load(open(path))
    else:
        data = vdf.VDFDict()
        data['UserLocalConfigStore'] = {'Software': {'Valve': {'Steam': {}}}}

    steam_input = data['UserLocalConfigStore']
    if 'Apps' not in steam_input:
        steam_input['Apps'] = {}

    launch_options = data['UserLocalConfigStore']['Software']['Valve']['Steam']
    if 'Apps' not in launch_options:
        launch_options['Apps'] = {}

    return data


def update_steam_config(tweaks_file, steam_data, priority):
    if not file_exists(tweaks_file):
        return

    compat = steam_data['InstallConfigStore']['Software']['Valve']['Steam']['CompatToolMapping']

    data = yaml.load(open(tweaks_file), Loader=yaml.FullLoader)
    for key in data:
        if (key not in compat or
                'Priority' not in compat[key] or
                int(compat[key]['Priority']) <= priority):
            if 'compat_tool' in data[key]:
                entry = {}
                entry['name'] = data[key]['compat_tool']
                if 'compat_config' in data[key]:
                    entry['config'] = data[key]['compat_config']
                entry['Priority'] = priority
                compat[key] = entry


def update_steam_localconfig(tweaks_file, steam_data):
    if not file_exists(tweaks_file):
        return

    steam_input_data = steam_data['UserLocalConfigStore']['Apps']
    launch_options = steam_data['UserLocalConfigStore']['Software']['Valve']['Steam']['Apps']

    data = yaml.load(open(tweaks_file), Loader=yaml.FullLoader)
    for key in data:
        if ('steam_input' in data[key] and
                data[key]['steam_input'] == 'enabled'):
            steam_input_data[key] = {
                "UseSteamControllerConfig": "2",
                "SteamControllerRumble": "-1",
                "SteamControllerRumbleIntensity": "320",
                "EnableSCTenFootOverlayCheckNew": "1"
            }

        if 'launch_options' in data[key]:
            if key not in launch_options:
                launch_options[key] = {}
            launch_options[key]['LaunchOptions'] = data[key]['launch_options']


def main():
    se = BuddyContext()
    ensure_directory(se.STEAM_DIR)
    if (file_exists(se.STATIC_TWEAKS_FILE) and
            not file_exists(se.MAIN_TWEAKS_FILE)):
        shutil.copyfile(se.STATIC_TWEAKS_FILE,
                        se.MAIN_TWEAKS_FILE)

    attempts = 0
    while attempts < 5:
        try:
		    urllib.request.urlretrieve(
                'https://raw.githubusercontent.com/ChimeraOS/chimera/master/steam-tweaks.yaml',
                se.MAIN_TWEAKS_FILE)
            break
        except:
            print('failed to update tweaks file (attempt {})'.format(attempts + 1))
            time.sleep(2)
            attempts += 1

    ensure_directory_for_file(se.STEAM_CONFIG_FILE)

    config_data = load_steam_config(se.STEAM_CONFIG_FILE)

    update_steam_config(se.MAIN_TWEAKS_FILE,
                        config_data,
                        209)  # add global entries if file exists
    update_steam_config(se.LOCAL_TWEAKS_FILE,
                        config_data,
                        229)  # add local entries if file exists
    update_steam_config(se.COMPAT_DATA_FILE,
                        config_data,
                        209)  # add shortcut compat data
    vdf.dump(config_data, open(se.STEAM_CONFIG_FILE, 'w'), pretty=True)

    for user_dir in se.STEAM_USER_DIRS:
        config_file = user_dir + '/config/localconfig.vdf'

        ensure_directory_for_file(config_file)

        config_data = load_steam_localconfig(config_file)

        # Add global entries if file exists
        update_steam_localconfig(se.MAIN_TWEAKS_FILE,
                                 config_data)
        # Add local entries if file exists
        update_steam_localconfig(se.LOCAL_TWEAKS_FILE,
                                 config_data)

        vdf.dump(config_data, open(config_file, 'w'), pretty=True)


if __name__ == '__main__':
	vdf.dump(config_data, open(config_file, 'w'), pretty=True)
