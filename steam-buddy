#!/usr/bin/env python3

import os
import re
import yaml
import json
import shutil
import subprocess
from steam_buddy.flathub import Flathub
from bottle import route, request, static_file, run, template, redirect, response, abort

DATA_DIR = os.getenv('XDG_DATA_HOME', os.path.expanduser('~/.local/share'))

RESOURCE_DIR = os.getcwd()
if not os.path.isfile(os.path.join(RESOURCE_DIR, 'views/base.tpl')):
	RESOURCE_DIR = "/usr/share/steam-buddy"

SHORTCUT_DIR=DATA_DIR + '/steam-shortcuts'
BANNER_DIR=DATA_DIR + '/steam-buddy/banners'
CONTENT_DIR=DATA_DIR + '/steam-buddy/content'

PLATFORMS = {
	"flathub" : "Flathub",
	"gb"      : "Game Boy",
	"gba"     : "Game Boy Advance",
	"gbc"     : "Game Boy Color",
	"sgg"     : "Game Gear",
	"genesis" : "Genesis",
	"sms"     : "Master System",
	"nes"     : "Nintendo",
	"snes"    : "Super Nintendo",
}

FLATHUB_HANDLER = Flathub()

def sanitize(string):
	if isinstance(string, str):
		return string.replace('\n', '_').replace('\r', '_').replace('/', '_').replace('\\', '_').replace('\0', '_').replace('"', '')

	return string

def load_shortcuts(platform):
	shortcuts = []
	if not os.path.exists(SHORTCUT_DIR):
		os.makedirs(SHORTCUT_DIR)
	shortcuts_file = "{shortcuts_dir}/steam-buddy.{platform}.yaml".format(shortcuts_dir=SHORTCUT_DIR, platform=platform)
	if os.path.isfile(shortcuts_file):
		shortcuts = yaml.load(open(shortcuts_file), Loader=yaml.Loader)

	if not shortcuts:
		shortcuts = []

	return shortcuts


def delete_file_link(base_dir, platform, name):
	e = re.escape(name) + r"\.[^.]+$"
	d = os.path.join(base_dir, platform)
	links = []
	if os.path.isdir(d):
		links = [os.path.join(d, l) for l in os.listdir(d) if re.match(e, l)]

	if len(links) < 1:
		return

	for link in links:
		if os.path.islink(link) or os.path.exists(link):
			os.remove(link)


def upsert_file(base_dir, platform, name, data):
	if not data:
		return

	filename = sanitize(data.filename)
	file_dir = "{base_dir}/{platform}/.{name}".format(base_dir=base_dir, platform=platform, name=name)

	if not os.path.exists(file_dir):
		os.makedirs(file_dir)

	file_path = "{file_dir}/{filename}".format(file_dir=file_dir, filename=filename)
	if os.path.exists(file_path):
		os.remove(file_path)

	data.save(file_path)

	_, ext = os.path.splitext(filename)
	dst = "{base_dir}/{platform}/{name}{ext}".format(base_dir=base_dir, platform=platform, name=name, ext=ext)

	delete_file_link(base_dir, platform, name)
	os.symlink(file_path, dst)

	return dst


def delete_file(base_dir, platform, name):
	file_dir = "{base_dir}/{platform}/.{name}".format(base_dir=base_dir, platform=platform, name=name)

	if os.path.exists(file_dir):
		shutil.rmtree(file_dir)

	delete_file_link(base_dir, platform, name)


@route('/')
def root():
	return template('platforms.tpl', platforms=PLATFORMS)

@route('/platforms/<platform>')
def platform(platform):
	if platform == "flathub":
		return template('flathub', app_list=FLATHUB_HANDLER.get_installed_applications(), isInstalledOverview=True, platform=platform, platformName=PLATFORMS[platform])
	shortcuts = sorted(load_shortcuts(platform), key=lambda s: s['name'])
	data = []
	for shortcut in shortcuts:
		filename = None
		banner = None
		hidden = 'hidden' if 'hidden' in shortcut and shortcut['hidden'] else ''
		if 'banner' in shortcut:
			filename = os.path.basename(shortcut['banner'])
			banner = '/banners/{platform}/{filename}'.format(platform=platform, name=shortcut['name'], filename=filename)
		data.append({ 'hidden' : hidden, 'filename' : filename, 'banner' : banner, 'name' : shortcut['name'] })

	return template('platform.tpl', shortcuts=data, platform=platform, platformName=PLATFORMS[platform])

@route('/banners/<platform>/<filename>')
def banners(platform, filename):
	base = "{banner_dir}/{platform}".format(banner_dir=BANNER_DIR, platform=platform)
	return static_file(filename, root='{base}'.format(base=base))

@route('/platforms/<platform>/new')
def new(platform):
	if platform == "flathub":
		return template('flathub', app_list=FLATHUB_HANDLER.get_available_applications(), isInstalledOverview=False, isNew=True, platform=platform, platformName=PLATFORMS[platform])
	return template('new.tpl', isNew=True, isEditing=False, platform=platform, platformName=PLATFORMS[platform], name='', hidden='')

@route('/platforms/<platform>/edit/<name>')
def edit(platform, name):
	if platform == "flathub":
		application = FLATHUB_HANDLER.get_application(name)
		if application:
			return template('flathub_edit', app=application, platform="flathub", platformName="Flathub",
							name=name, )
		else:
			abort(404, '{} not found in Flathub'.format(name))
	shortcuts = load_shortcuts(platform)

	matches = [e for e in shortcuts if e['name'] == name and e['cmd'] == platform]
	shortcut = matches[0]

	return template('new.tpl', isEditing=True, platform=platform, platformName=PLATFORMS[platform], name=name, hidden=shortcut['hidden'])

@route('/images/flathub/<filename>')
def flathub_images(filename):
	path = os.path.join(RESOURCE_DIR, 'images/flathub')
	local = os.path.join(BANNER_DIR, 'flathub')
	if os.path.isfile(os.path.join(local, filename)):
		path = local

	return static_file(filename, root=path)

@route('/images/<filename>')
def images(filename):
	return static_file(filename, root=os.path.join(RESOURCE_DIR, 'images'))

@route('/shortcuts/new', method='POST')
def shortcut_create():
	name = sanitize(request.forms.get('name'))
	platform = sanitize(request.forms.get('platform'))
	hidden = sanitize(request.forms.get('hidden'))
	banner = request.files.get('banner')
	content = request.files.get('content')

	if name == None or name.strip() == '':
		redirect('/platforms/{platform}/new'.format(platform=platform))
		return

	name = name.strip()

	shortcuts_file = "{shortcuts_dir}/steam-buddy.{platform}.yaml".format(shortcuts_dir=SHORTCUT_DIR, platform=platform)
	shortcuts = load_shortcuts(platform)

	matches = [e for e in shortcuts if e['name'] == name and e['cmd'] == platform]
	if len(matches) > 0:
		return 'Shortcut already exists'

	banner_path = upsert_file(BANNER_DIR, platform, name, banner)
	content_path = upsert_file(CONTENT_DIR, platform, name, content)

	shortcut = {}
	shortcut['name'] = name
	shortcut['cmd'] = platform
	shortcut['hidden'] = hidden == 'on'
	shortcut['tags'] = [ PLATFORMS[platform] ]
	if banner:
		shortcut['banner'] = banner_path
	if content:
		shortcut['dir'] = '"' + os.path.dirname(content_path) + '"'
		shortcut['params'] = '"' + os.path.basename(content_path) + '"'

	shortcuts.append(shortcut)
	yaml.dump(shortcuts, open(shortcuts_file, 'w'), default_flow_style=False)

	redirect('/platforms/{platform}'.format(platform=platform))

@route('/shortcuts/edit', method='POST')
def shortcut_update():
	name = sanitize(request.forms.get('original_name')) # do not allow editing name
	platform = sanitize(request.forms.get('platform'))
	hidden = sanitize(request.forms.get('hidden'))
	banner = request.files.get('banner')
	content = request.files.get('content')

	shortcuts_file = "{shortcuts_dir}/steam-buddy.{platform}.yaml".format(shortcuts_dir=SHORTCUT_DIR, platform=platform)
	shortcuts = load_shortcuts(platform)

	matches = [e for e in shortcuts if e['name'] == name and e['cmd'] == platform]
	shortcut = matches[0]

	banner_path = upsert_file(BANNER_DIR, platform, name, banner)
	content_path = upsert_file(CONTENT_DIR, platform, name, content)

	shortcut['name'] = name
	shortcut['cmd'] = platform
	shortcut['hidden'] = hidden == 'on'
	if banner:
		shortcut['banner'] = banner_path
	if content:
		shortcut['dir'] = '"' + os.path.dirname(content_path) + '"'
		shortcut['params'] = '"' + os.path.basename(content_path) + '"'

	yaml.dump(shortcuts, open(shortcuts_file, 'w'), default_flow_style=False)

	redirect('/platforms/{platform}'.format(platform=platform))

@route('/shortcuts/delete', method='POST')
def shortcut_delete():
	name = sanitize(request.forms.get('name'))
	platform = sanitize(request.forms.get('platform'))

	shortcuts_file = "{shortcuts_dir}/steam-buddy.{platform}.yaml".format(shortcuts_dir=SHORTCUT_DIR, platform=platform)
	shortcuts = load_shortcuts(platform)

	matches = [e for e in shortcuts if e['name'] == name and e['cmd'] == platform]
	shortcut = matches[0]

	delete_file(CONTENT_DIR, platform, name)
	delete_file(BANNER_DIR, platform, name)

	shortcuts.remove(shortcut)
	yaml.dump(shortcuts, open(shortcuts_file, 'w'), default_flow_style=False)

	redirect('/platforms/{platform}'.format(platform=platform))

@route('/flathub/install/<flatpak_id>')
def flathub_install(flatpak_id):
	platform = "flathub"
	application = FLATHUB_HANDLER.get_application(flatpak_id)
	if not application:
		abort(404, '{} not found in Flathub'.format(flatpak_id))
	application.install()

	shortcuts = load_shortcuts(platform)
	shortcut = {
		'name': application.name,
		'hidden': False,
		'banner': application.get_image(os.path.join(BANNER_DIR, platform)),
		'params': application.flatpak_id,
		'cmd': "flatpak run",
		'tags': ["Flathub"],
	}
	shortcuts.append(shortcut)
	shortcuts_file = "{shortcuts_dir}/steam-buddy.{platform}.yaml".format(shortcuts_dir=SHORTCUT_DIR, platform=platform)
	yaml.dump(shortcuts, open(shortcuts_file, 'w'), default_flow_style=False)

	redirect('/platforms/{platform}/edit/{name}'.format(platform=platform, name=flatpak_id))

@route('/flathub/uninstall/<flatpak_id>')
def flathub_uninstall(flatpak_id):
	platform = "flathub"
	application = FLATHUB_HANDLER.get_application(flatpak_id)
	if not application:
		abort(404, '{} not found in Flathub'.format(flatpak_id))
	application.uninstall()

	shortcuts = load_shortcuts(platform)
	for shortcut in shortcuts:
		if application.name == shortcut['name']:
			shortcuts.remove(shortcut)
			break
	shortcuts_file = "{shortcuts_dir}/steam-buddy.{platform}.yaml".format(shortcuts_dir=SHORTCUT_DIR, platform=platform)
	yaml.dump(shortcuts, open(shortcuts_file, 'w'), default_flow_style=False)

	redirect('/platforms/{platform}/edit/{name}'.format(platform=platform, name=flatpak_id))

@route('/flathub/update/<flatpak_id>')
def flathub_update(flatpak_id):
	platform = "flathub"
	application = FLATHUB_HANDLER.get_application(flatpak_id)
	if not application:
		abort(404, '{} not found in Flathub'.format(flatpak_id))
	application.update()

	redirect('/platforms/{platform}/edit/{name}'.format(platform=platform, name=flatpak_id))

@route('/flathub/progress/<flatpak_id>')
def flathub_progress(flatpak_id):
	application = FLATHUB_HANDLER.get_application(flatpak_id)
	if not application:
		abort(404, '{} not found in Flathub'.format(flatpak_id))

	response.content_type = 'application/json'
	values = {
		"busy": application.busy,
		"progress": application.progress
	}

	return json.dumps(values)

@route('/flathub/description/<flatpak_id>')
def flathub_description(flatpak_id):
	application = FLATHUB_HANDLER.get_application(flatpak_id)
	values = {
		"description": application.get_description()
	}
	return json.dumps(values)

@route('/steam/restart')
def steam_restart():
	subprocess.call(["pkill", "steam"])
	redirect('/')

if __name__ == '__main__':
	os.chdir(RESOURCE_DIR)
	run(host='localhost', port=8844)
