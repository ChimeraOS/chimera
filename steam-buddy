#!/usr/bin/env python

import os
import yaml
import requests
import subprocess
from bottle import route, request, static_file, run, template, redirect

DATA_DIR='/var/lib/steam-buddy'
SHORTCUT_DIR=DATA_DIR + '/shortcuts'
BANNER_DIR=DATA_DIR + '/banners'
CONTENT_DIR=DATA_DIR + '/content'

PLATFORMS = {
	"gba"     : "Game Boy Advance",
	"genesis" : "Genesis",
	"sms"     : "Master System",
	"nes"     : "Nintendo",
	"snes"    : "Super Nintendo",
}

# This should be the flathub repo
FLATPAK_REPO_NAME = "flathub"
FLATPAK_REPO_URL = "https://dl.flathub.org/repo/flathub.flatpakrepo"

FLATHUB_API_URL = "https://flathub.org/api/v1/apps"

def load_shortcuts(platform):
	shortcuts = []
	if not os.path.exists(SHORTCUT_DIR):
		os.makedirs(SHORTCUT_DIR)
	shortcuts_file = "{shortcuts_dir}/{platform}.yaml".format(shortcuts_dir=SHORTCUT_DIR, platform=platform)
	if os.path.isfile(shortcuts_file):
		shortcuts = yaml.load(open(shortcuts_file), Loader=yaml.FullLoader)

	if not shortcuts:
		shortcuts = []

	return shortcuts

def flatpak_add_repo():
	# This only adds the flatpak repo if it isn't already installed
	return_value = subprocess.call(["flatpak", "remote-add", "--if-not-exists", FLATPAK_REPO_NAME, FLATPAK_REPO_URL])
	if return_value != 0:
		print("Error: Failed to add the {name} repo to with url {url} flatpak".format(name=FLATPAK_REPO_NAME, url=FLATPAK_REPO_URL))

def flatpak_get_installed_apps():
	installed_apps = []
	for line in subprocess.check_output(["flatpak", "list", "--app"]).splitlines():
		if isinstance(line, bytes):
			line = line.decode("utf-8")
		name_description, flatpak_id, version, _ = line.split("\t", 3)
		installed_apps.append(flatpak_id)
	return installed_apps

def flatpak_is_installed(flatpak_id):
	return flatpak_id in flatpak_get_installed_apps()

@route('/')
def root():
	return template('platforms.tpl', platforms=PLATFORMS)

@route('/platforms/<platform>')
def platform(platform):
	shortcuts = sorted(load_shortcuts(platform), key=lambda s: s['name'])
	data = []
	for shortcut in shortcuts:
		filename = None
		banner = None
		hidden = 'hidden' if 'hidden' in shortcut and shortcut['hidden'] else ''
		if 'banner' in shortcut:
			filename = os.path.basename(shortcut['banner'])
			banner = '/banners/{platform}/{filename}'.format(platform=platform, filename=filename)
		data.append({ 'hidden' : hidden, 'filename' : filename, 'banner' : banner, 'name' : shortcut['name'] })

	return template('platform.tpl', shortcuts=data, platform=platform, platformName=PLATFORMS[platform])

@route('/banners/<platform>/<filename>')
def banners(platform, filename):
	base = "{banner_dir}/{platform}".format(banner_dir=BANNER_DIR, platform=platform)
	return static_file(filename, root='{base}'.format(base=base))

@route('/platforms/<platform>/new')
def new(platform):
	return template('new.tpl', isNew=True, isEditing=False, platform=platform, platformName=PLATFORMS[platform], name='', hidden='')

@route('/platforms/<platform>/edit/<name>')
def edit(platform, name):
	shortcuts_file = "{shortcuts_dir}/{platform}.yaml".format(shortcuts_dir=SHORTCUT_DIR, platform=platform)
	shortcuts = load_shortcuts(platform)

	matches = [e for e in shortcuts if e['name'] == name and e['cmd'] == platform]
	shortcut = matches[0]

	return template('new.tpl', isEditing=True, platform=platform, platformName=PLATFORMS[platform], name=name, hidden=shortcut['hidden'])

@route('/images/<filename>')
def images(filename):
	return static_file('images/' + filename, root='.')

@route('/shortcuts/new', method='POST')
def shortcut_create():
	name = request.forms.get('name')
	platform = request.forms.get('platform')
	hidden = request.forms.get('hidden')
	banner = request.files.get('banner')
	content = request.files.get('content')

	if name == None or name.strip() == '':
		redirect('/platforms/{platform}/new'.format(platform=platform))
		return

	name = name.strip()

	shortcuts_file = "{shortcuts_dir}/{platform}.yaml".format(shortcuts_dir=SHORTCUT_DIR, platform=platform)
	shortcuts = load_shortcuts(platform)

	matches = [e for e in shortcuts if e['name'] == name and e['cmd'] == platform]
	if len(matches) > 0:
		return 'Shortcut already exists'

	if banner:
		_, ext = os.path.splitext(banner.filename)
		dir_path = "{banner_dir}/{platform}".format(banner_dir=BANNER_DIR, platform=platform)
		if not os.path.exists(dir_path):
			os.makedirs(dir_path)
		banner_path = "{dir_path}/{filename}{ext}".format(dir_path=dir_path, filename=name, ext=ext)
		if os.path.exists(banner_path):
			os.remove(banner_path)
		banner.save(banner_path)

	if content:
		_, ext = os.path.splitext(content.filename)
		dir_path = "{content_dir}/{platform}".format(content_dir=CONTENT_DIR, platform=platform)
		if not os.path.exists(dir_path):
			os.makedirs(dir_path)
		content_path = "{dir_path}/{filename}{ext}".format(dir_path=dir_path, filename=name, ext=ext)
		if os.path.exists(content_path):
			os.remove(content_path)
		content.save(content_path)


	shortcut = {}
	shortcut['name'] = name
	shortcut['cmd'] = platform
	shortcut['hidden'] = hidden == 'on'
	shortcut['tags'] = [ PLATFORMS[platform] ]
	if banner:
		shortcut['banner'] = banner_path
	if content:
		shortcut['params'] = '"' + content_path + '"'

	shortcuts.append(shortcut)
	yaml.dump(shortcuts, open(shortcuts_file, 'w'), default_flow_style=False)

	redirect('/platforms/{platform}'.format(platform=platform))

@route('/shortcuts/edit', method='POST')
def shortcut_update():
	original_name = request.forms.get('original_name')
	name = request.forms.get('name')
	platform = request.forms.get('platform')
	hidden = request.forms.get('hidden')
	banner = request.files.get('banner')
	content = request.files.get('content')

	shortcuts_file = "{shortcuts_dir}/{platform}.yaml".format(shortcuts_dir=SHORTCUT_DIR, platform=platform)
	shortcuts = load_shortcuts(platform)

	matches = [e for e in shortcuts if e['name'] == name and e['cmd'] == platform]

	if banner:
		_, ext = os.path.splitext(banner.filename)
		dir_path = "{banner_dir}/{platform}".format(banner_dir=BANNER_DIR, platform=platform)
		if not os.path.exists(dir_path):
			os.makedirs(dir_path)
		banner_path = "{dir_path}/{filename}{ext}".format(dir_path=dir_path, filename=name, ext=ext)
		if os.path.exists(banner_path):
			os.remove(banner_path)
		banner.save(banner_path)

	if content:
		_, ext = os.path.splitext(content.filename)
		dir_path = "{content_dir}/{platform}".format(content_dir=CONTENT_DIR, platform=platform)
		if not os.path.exists(dir_path):
			os.makedirs(dir_path)
		content_path = "{dir_path}/{filename}{ext}".format(dir_path=dir_path, filename=name, ext=ext)
		if os.path.exists(content_path):
			os.remove(content_path)
		content.save(content_path)


	shortcut = matches[0]
	shortcut['name'] = original_name # do not allow editing name
	shortcut['cmd'] = platform
	shortcut['hidden'] = hidden == 'on'
	if banner:
		shortcut['banner'] = banner_path
	if content:
		shortcut['params'] = '"' + content_path + '"'

	yaml.dump(shortcuts, open(shortcuts_file, 'w'), default_flow_style=False)

	redirect('/platforms/{platform}'.format(platform=platform))

@route('/shortcuts/delete', method='POST')
def shortcut_delete():
	name = request.forms.get('name')
	platform = request.forms.get('platform')

	shortcuts_file = "{shortcuts_dir}/{platform}.yaml".format(shortcuts_dir=SHORTCUT_DIR, platform=platform)
	shortcuts = load_shortcuts(platform)

	matches = [e for e in shortcuts if e['name'] == name and e['cmd'] == platform]
	shortcut = matches[0]

	if 'params' in shortcut:
		os.remove(shortcut['params'])

	if 'banner' in shortcut:
		os.remove(shortcut['banner'])

	shortcuts.remove(shortcut)
	yaml.dump(shortcuts, open(shortcuts_file, 'w'), default_flow_style=False)

	redirect('/platforms/{platform}'.format(platform=platform))

@route('/flatpak')
def flatpak():
	app_list = []
	installed_apps = flatpak_get_installed_apps()
	available_apps = requests.get(FLATHUB_API_URL)
	for app in available_apps.json():
		if app["flatpakAppId"] in installed_apps:
			app_list.append(app)

	return template('flatpak', app_list=app_list, isInstalledOverview=True)

@route('/flatpak/available')
def flatpak_available_software():
	app_list = requests.get(FLATHUB_API_URL)
	return template('flatpak', app_list=app_list.json(), isInstalledOverview=False)

@route('/flatpak/app/<flatpak_id>')
def flatpak_info(flatpak_id):
	isInstalled = flatpak_is_installed(flatpak_id)
	app = requests.get("{}/{}".format(FLATHUB_API_URL, flatpak_id))
	return template('flatpak_info', isInstalled=isInstalled, app=app.json(), flatpak_id=flatpak_id)

@route('/flatpak/install/<flatpak_id>')
def flatpak_install(flatpak_id):
	subprocess.Popen(["flatpak", "install", "-y", "flathub", flatpak_id],
							stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
	redirect('/flatpak')

@route('/flatpak/uninstall/<flatpak_id>')
def flatpak_uninstall(flatpak_id):
	subprocess.call(["flatpak", "uninstall", "-y", flatpak_id])
	redirect('/flatpak')

if __name__ == '__main__':
	flatpak_add_repo();
	run(host='0.0.0.0', port=80)
