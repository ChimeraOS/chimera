#!/usr/bin/env python

import os
import sys
import vdf
import yaml
import zlib
from datetime import datetime, date

STEAM_USER_DIRS = []
compat_data = {}

def yearsago(years):
    from_date = datetime.now().date()
    try:
        return from_date.replace(year=from_date.year - years)
    except ValueError:
        return from_date.replace(month=2, day=28, year=from_date.year - years)


TIME_WARP_TAG='Time Warp'
TIME_WARP_DATE=None
TIME_WARP=os.environ.get('TIME_WARP')
if TIME_WARP:
    TIME_WARP_DATE=yearsago(int(TIME_WARP)).isoformat()


def get_banner_id(exe, name):
    crc_input = ''.join([exe, name])
    high_32 = zlib.crc32(crc_input.encode('utf-8')) | 0x80000000
    full_64 = (high_32 << 32) | 0x02000000
    return full_64

def get_compat_id(exe, name):
    crc_input = ''.join([exe, name])
    return (zlib.crc32(crc_input.encode('utf-8')) & 0xffffffff) | 0x80000000

def get_shortcut_id(exe, name):
    return get_compat_id(exe, name) - 2**32


"""
Returns the shortcut dictionary of the given app_id. If not found returns {}
"""
def match_app_id(sc, app_id):
    for s in sc:
        if 'appid' in sc[s] and sc[s]['appid'] == app_id:
            return sc[s]
    return {}

"""
Creates a new shrotcut dictionary to be written later on the shortcut file.
If an application exists with the same app ID in the file, tries to update it.
"""
def create_shortcut(entry, steam_shortcuts):
    if 'name' not in entry:
        print('shortcut missing required field "name"; skipping')
        return
    if 'cmd' not in entry:
        print('shortcut missing required field "cmd"; skipping')
        return

    shortcut_id = get_shortcut_id(entry['cmd'], entry['name'])
    banner_id = str(get_banner_id(entry['cmd'], entry['name']))
    compat_id = str(get_compat_id(entry['cmd'], entry['name']))

    shortcut = match_app_id(steam_shortcuts, shortcut_id)
    shortcut['appid'] = shortcut_id
    shortcut['AppName'] = entry['name']
    shortcut['Exe'] = entry['cmd']

    if 'dir' in entry:
        shortcut['StartDir'] = entry['dir']
    else:
        shortcut['StartDir'] = "~"

    if 'params' in entry:
        shortcut['LaunchOptions'] = entry['params']

    if 'hidden' in entry:
        shortcut['isHidden'] = entry['hidden']

    if 'icon' in entry:
        shortcut['icon'] = entry['icon']

    shortcut['AllowDesktopConfig'] = 1
    shortcut['AllowOverlay'] = 1
    shortcut['OpenVR'] = 0

    if 'tags' not in shortcut:
        shortcut['tags'] = {}

    if 'tags' not in entry:
        entry['tags'] = []

    shortcut_tags = list(shortcut['tags'].values())

    if TIME_WARP_DATE:
        # handle the case where the time warp or release dates changed; i.e. need to be able to remove the tag
        if TIME_WARP_TAG in shortcut_tags:
            shortcut_tags.remove(TIME_WARP_TAG)

        release_date = entry['release_date'] if 'release_date' in entry else None
        if type(release_date) is date:
            release_date = release_date.isoformat()

        if type(release_date) is int:
            release_date = str(release_date)

        if release_date and type(release_date) is str and release_date <= TIME_WARP_DATE:
            entry['tags'].append(TIME_WARP_TAG)

    entry['tags'].extend(shortcut_tags)
    tags = set(entry['tags'])
    t = 0
    shortcut['tags'] = {}
    for tag in tags:
        shortcut['tags'][str(t)] = tag
        t += 1

    if 'banner' in entry:
        _, ext = os.path.splitext(entry['banner'])
        for user_dir in STEAM_USER_DIRS:
            dst_dir = user_dir + '/config/grid/'
            if not os.path.isdir(dst_dir):
                os.makedirs(dst_dir)
            dst = dst_dir + banner_id + ext
            if os.path.islink(dst) or os.path.isfile(dst):
                os.remove(dst)
            os.symlink(entry['banner'], dst)

    if 'compat_tool' in entry:
        if compat_id not in compat_data:
            compat_data[compat_id] = {}
        compat_data[compat_id]['compat_tool'] = entry['compat_tool']
        if 'compat_config' in entry:
            compat_data[compat_id]['compat_config'] = entry['compat_config']

    return shortcut

def main():
    # Initialize all directories and files
    if 'XDG_CACHE_HOME' in os.environ:
        CACHE_HOME = os.environ['XDG_CACHE_HOME']
    else:
        CACHE_HOME = os.environ['HOME'] + '/.cache'

    COMPAT_DATA_FILE = CACHE_HOME + '/steam-shortcuts-compat.yaml'

    if 'XDG_DATA_HOME' in os.environ:
        DATA_HOME = os.environ['XDG_DATA_HOME']
    else:
        DATA_HOME = os.environ['HOME'] + '/.local/share'

    DATA_HOME += '/'

    if not os.path.isdir(DATA_HOME + 'steam-shortcuts'):
        os.makedirs(DATA_HOME + 'steam-shortcuts')

    SHORTCUT_DIRS = [ DATA_HOME + 'steam-shortcuts' ]

    if os.path.isdir('/usr/share/steam-shortcuts'):
        SHORTCUT_DIRS.append('/usr/share/steam-shortcuts')

    STEAM_USER_BASE_DIR = DATA_HOME + 'Steam/userdata/'
    for d in os.listdir(STEAM_USER_BASE_DIR):
        if d == 'anonymous' or d == 'ac' or d == '0':
            continue
        path = STEAM_USER_BASE_DIR + d
        if os.path.isdir(path):
            STEAM_USER_DIRS.append(path)

    # Don't scan user directories if there are no shortcuts to create
    data = []
    for d in SHORTCUT_DIRS:
        for f in os.listdir(d):
            y = open(d + '/' + f)
            dd = yaml.load(y, Loader=yaml.FullLoader)
            if type(dd) is list:
                data = data + dd
            elif type(dd) is dict:
                data.append(dd)
            else:
                print("Error reading file " + d + "/" + f)  # Should not happen

    if len(data) == 0:
        sys.exit(1)

    # Get current shortcuts for each user
    for user_dir in STEAM_USER_DIRS:
        steam_shortcuts = {}
        file_path = user_dir + '/config/shortcuts.vdf'
        STEAM_SHORTCUT_FILE = file_path
        if os.path.isfile(file_path):
            s = vdf.binary_load(open(STEAM_SHORTCUT_FILE, 'rb'))
            if 'shortcuts' in s:
                steam_shortcuts = s['shortcuts']

        shortcuts = {}
        n = 0
        shortcut = None
        for entry in data:
            shortcut = create_shortcut(entry, steam_shortcuts)
            shortcuts[str(n)] = shortcut
            n += 1

        # Write the new file
        out = {}
        out['shortcuts'] = shortcuts
        b = vdf.binary_dumps(out)
        open(STEAM_SHORTCUT_FILE, 'wb').write(b)

    yaml.dump(compat_data, open(COMPAT_DATA_FILE, 'w'), default_flow_style=False)


main()
